generator client {
  provider = "prisma-client-js"
  plugin   = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts Account[]
  sessions Session[]
  Order    Order[]
  Cart     Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Merchandise {
  id            String  @id @default(cuid())
  name          String
  description   String
  image         String
  originalPrice Float
  discountPrice Float
  stock         Int
  bulkOrder     Boolean @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
  Cart      Cart[]
}

model OrderItem {
  id            String @id @default(cuid())
  orderId       String
  merchandiseId String
  quantity      Int
  size          Sizes  @default(FREE_SIZE)
  total         Float

  Order       Order       @relation(fields: [orderId], references: [id])
  Merchandise Merchandise @relation(fields: [merchandiseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     String @id @default(cuid())
  userId String

  total     Float
  delivered Boolean @default(false)

  User User @relation(fields: [userId], references: [id])

  PaymentOrder PaymentOrder?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  OrderItem     OrderItem[]
  merchandiseId String?
}

model PaymentOrder {
  id              String @id @default(cuid())
  razorpayOrderID String @unique
  status          Status @default(PENDING)
  amount          Int
  paymentData     Json?
  Order           Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId])
}

model Cart {
  id          String      @id @default(cuid())
  Merchandise Merchandise @relation(fields: [merchandiseId], references: [id])
  quantity    Int

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  merchandiseId String
}

enum Role {
  ADMIN
  CORE
  USER
  CLASS_REP
}

enum Status {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum Sizes {
  XS
  S
  M
  L
  XL
  XXL
  TXL
  FXL
  FREE_SIZE
}
